# --- Start of Corrected Code Block ---

init python:
	import time

	# --- Global State Flags ---
	wrong_input_active = False
	wrong_input_start_time = None
	penalty_active = False
	is_cutscene_active = False
	# --- End Global State Flags ---


	# --- Puzzle Logic ---
	class Puzzle:
		def __init__(self):
			self.sequence = ["zone1", "zone2", "zone1", "zone2", "zone2", "locked1", "zone1", "locked1", "zone2", "locked1"]
			self.current_seq_index = 0
			self.hold_start_time = {} # Populated by reset()
			self.current_active_zone = None
			self.cooldown_end = 0.0
			self.last_particle_update = time.time()
			self.initial_touch_spawned = False
			self.initial_touch_spawned_cooldown = False
			self.played_cutscene = False
			self.puzzle_type_id = 1 # For GameplayScreen logic
			self.reset()

		def process_zone(self, zone, now, expected_zone):
			"""Checks if the correct zone is being held long enough."""
			current_hold_start = self.hold_start_time.get(zone)
			if self.current_active_zone == zone and zone == expected_zone:
				if current_hold_start is None:
					self.hold_start_time[zone] = now
				elif now - current_hold_start >= adjustable_config["required_hold_time"] / get_hotzone_multiplier():
					self.hold_start_time[zone] = None
					return True
			else:
				if zone in self.hold_start_time:
					self.hold_start_time[zone] = None
			return False

		def check_and_trigger_cutscenes(self):
			"""Checks if the current puzzle state should trigger a cutscene."""
			global is_cutscene_active
			if isinstance(self, Puzzle) and not isinstance(self, (Puzzle2, Puzzle3, Puzzle4, Puzzle5)):
				if self.current_seq_index == 6 and not self.played_cutscene:
					is_cutscene_active = True
					self.played_cutscene = True
					renpy.call("cut_scene1_label")
					is_cutscene_active = False
					if self.current_seq_index < len(self.sequence):
						self.hold_start_time[self.sequence[self.current_seq_index]] = None
			elif isinstance(self, Puzzle2):
				if self.current_seq_index == 5 and not self.played_cutscene:
					is_cutscene_active = True
					self.played_cutscene = True
					renpy.call("cut_scene2_label")
					is_cutscene_active = False
					if self.current_seq_index < len(self.sequence):
						self.hold_start_time[self.sequence[self.current_seq_index]] = None


		def rub_timer(self):
			"""Processes player interaction, sets flags like wrong_input_active."""
			global wrong_input_active, wrong_input_start_time, penalty_active, is_cutscene_active
			if is_cutscene_active: return
			now = time.time()
			if now < self.cooldown_end:
				self.current_active_zone = None
				wrong_input_active = False
				wrong_input_start_time = None
				penalty_active = False
				for zone in self.hold_start_time: self.hold_start_time[zone] = None
				return
			if clicked_cooldown and left_mouse_down():
				self.current_active_zone = None
				wrong_input_active = False
				wrong_input_start_time = None
				penalty_active = False
				for zone in self.hold_start_time: self.hold_start_time[zone] = None
				if not self.initial_touch_spawned_cooldown:
				   spawn_particle(renpy.get_mouse_pos())
				   self.initial_touch_spawned_cooldown = True
				return
			else: self.initial_touch_spawned_cooldown = False

			expected_zone = self.sequence[self.current_seq_index] if self.current_seq_index < len(self.sequence) else None
			var_previous_zone = self.current_active_zone
			new_active_zone = None
			mouse_is_down = left_mouse_down()
			if mouse_is_down:
				if clicked_zone1: new_active_zone = "zone1"
				elif clicked_zone2: new_active_zone = "zone2"
				elif clicked_zone3: new_active_zone = "zone3"
				elif clicked_zone4: new_active_zone = "zone4"
				elif clicked_zone5: new_active_zone = "zone5"
				elif clicked_zone6: new_active_zone = "zone6"
				elif clicked_zone7: new_active_zone = "zone7"
				elif clicked_zone8: new_active_zone = "zone8"
				elif clicked_locked1: new_active_zone = "locked1"
				elif clicked_locked2: new_active_zone = "locked2"
				elif clicked_locked3: new_active_zone = "locked3"
				elif clicked_locked4: new_active_zone = "locked4"
				elif clicked_locked5: new_active_zone = "locked5"
				elif clicked_locked6: new_active_zone = "locked6"
				elif clicked_locked7: new_active_zone = "locked7"
				elif clicked_locked8: new_active_zone = "locked8"
				elif clicked_locked9: new_active_zone = "locked9"
				elif clicked_locked10: new_active_zone = "locked10"
				elif clicked_locked11: new_active_zone = "locked11"
				elif clicked_locked12: new_active_zone = "locked12"
				elif clicked_locked13: new_active_zone = "locked13"
				elif clicked_locked14: new_active_zone = "locked14"

			changed_zone = (new_active_zone != var_previous_zone)
			self.current_active_zone = new_active_zone
			if not mouse_is_down:
				for zone_key in self.hold_start_time: self.hold_start_time[zone_key] = None
				wrong_input_active = False
				wrong_input_start_time = None
				penalty_active = False
			elif changed_zone and var_previous_zone is not None and var_previous_zone in self.hold_start_time:
				self.hold_start_time[var_previous_zone] = None

			if self.current_active_zone and mouse_is_down:
				if self.current_active_zone not in self.hold_start_time:
					 self.hold_start_time[self.current_active_zone] = None
				if self.current_active_zone == expected_zone:
					wrong_input_active = False
					wrong_input_start_time = None
					penalty_active = False
					if self.process_zone(self.current_active_zone, now, expected_zone):
						self.current_seq_index += 1
						self.cooldown_end = now + adjustable_config["cooldown_duration"] / get_hotzone_multiplier()
						init_heart_shower_anim()
						renpy.show_screen("FlashScreen")
						wrong_input_active = False
						wrong_input_start_time = None
						penalty_active = False
						self.check_and_trigger_cutscenes()
				else: # Wrong Zone
					if not wrong_input_active:
						wrong_input_start_time = now
						wrong_input_active = True
					if expected_zone and expected_zone in self.hold_start_time:
						self.hold_start_time[expected_zone] = None

			dt_particles = now - self.last_particle_update
			if dt_particles > 0:
				target_particles = compute_pps(jaily.excitement)
				current_particles = particle_config_excitement["particles_per_sec"]
				transition_duration = max(0.001, adjustable_config.get("particle_transition_duration", 5.0))
				base_rate = adjustable_config.get("pps_at_lower_bound", 0.2)
				transition_rate = base_rate / transition_duration
				if current_particles < target_particles:
					current_particles = min(target_particles, current_particles + transition_rate * dt_particles)
				elif current_particles > target_particles:
					current_particles = max(target_particles, current_particles - transition_rate * dt_particles)
				particle_config_excitement["particles_per_sec"] = current_particles
				self.last_particle_update = now

			if changed_zone:
				if self.current_active_zone is not None and not self.initial_touch_spawned:
					spawn_particle(renpy.get_mouse_pos())
					self.initial_touch_spawned = True
				if self.current_active_zone is None:
					self.initial_touch_spawned = False


		def update(self):
			"""Called periodically. Handles grace period timing AND calls external stat update."""
			global wrong_input_active, wrong_input_start_time, penalty_active, is_cutscene_active
			self.rub_timer()
			if not is_cutscene_active:
				if wrong_input_active and wrong_input_start_time is not None and not penalty_active:
					now = time.time()
					wrong_elapsed = now - wrong_input_start_time
					grace = adjustable_config.get("wrong_grace_period", 5.0)
					transition = adjustable_config.get("wrong_transition_duration", 1.0)
					if wrong_elapsed >= grace + transition:
						penalty_active = True
				update_stats(is_interacting())

		def reset(self):
			"""Resets the puzzle state."""
			global wrong_input_active, wrong_input_start_time, penalty_active

			self.current_seq_index = 0
			self.played_cutscene = False

			all_possible_zones = set(self.sequence)
			all_possible_zones.update([
				"zone1", "zone2", "zone3", "zone4", "zone5", "zone6", "zone7", "zone8",
				"locked1", "locked2", "locked3", "locked4", "locked5", "locked6",
				"locked7", "locked8", "locked9", "locked10", "locked11",
				"locked12", "locked13", "locked14"
			])
			self.hold_start_time = {zone: None for zone in all_possible_zones}

			self.current_active_zone = None
			self.cooldown_end = 0.0
			self.last_particle_update = time.time()
			self.initial_touch_spawned = False
			self.initial_touch_spawned_cooldown = False

			wrong_input_active = False
			wrong_input_start_time = None
			penalty_active = False

			if hasattr(update_stats, 'last_time'):
				update_stats.last_time = time.time()

			if 'particles' in globals(): particles[:] = []
			if 'excitement_particles' in globals(): excitement_particles[:] = []
			if 'trust_particles' in globals(): trust_particles[:] = []


	class Puzzle2(Puzzle):
		def __init__(self):
			super(Puzzle2, self).__init__()
			self.sequence = ["zone2", "zone2", "zone1", "zone1", "locked1", "zone1", "zone2", "locked1", "locked1", "locked2", "zone1", "zone2", "locked2"]
			self.puzzle_type_id = 2 # For GameplayScreen logic

	class Puzzle3(Puzzle):
		def __init__(self):
			super(Puzzle3, self).__init__()
			self.sequence = ["zone3", "zone3", "zone4", "zone3", "locked3", "zone4", "locked3", "zone4", "zone3", "locked4", "zone4", "locked3", "zone3", "locked4", "locked5", "zone4", "zone3", "locked5", "locked5"]
			self.puzzle_type_id = 3 # For GameplayScreen logic

	class Puzzle4(Puzzle):
		def __init__(self):
			super(Puzzle4, self).__init__()
			self.sequence = ["zone5", "zone6", "zone6", "zone5", "locked6", "zone6", "zone5", "locked6", "locked7", "zone5", "locked7", "locked7", "zone6", "locked8", "locked6", "locked8", "locked7", "locked8", "locked9", "locked9", "locked7", "locked8", "locked9"]
			self.puzzle_type_id = 4 # For GameplayScreen logic

	class Puzzle5(Puzzle):
		def __init__(self):
			super(Puzzle5, self).__init__()
			self.sequence = ["zone7", "zone8", "zone7", "locked10", "zone8", "zone7", "locked10", "locked11", "zone8", "locked11", "locked10", "locked12", "zone8", "locked11", "zone8", "locked13", "zone7", "locked10", "locked12", "locked13", "locked14", "locked11", "locked10", "locked12", "locked13", "locked14", "locked10", "locked14"]
			self.puzzle_type_id = 5 # For GameplayScreen logic

	current_puzzle = Puzzle()

	def reset_game():
		global jaily, current_puzzle
		jaily = JailyState()
		if current_puzzle:
			 current_puzzle.reset()

	def puzzle_state_check():
		global is_cutscene_active, current_puzzle, jaily
		if current_puzzle:
			current_puzzle.update()
		if not is_cutscene_active:
			if jaily.game_over:
				if jaily.temperature >= 103.0: renpy.jump("game_over_max_temp")
				elif jaily.embarrassment >= 100: renpy.jump("game_over_embarrassment")
				elif jaily.trust <= 0: renpy.jump("game_over_trust")
				elif jaily.excitement <= 0: renpy.jump("game_over_excitement")
				elif jaily.temperature <= adjustable_config["temp_lower_game_over"]: renpy.jump("game_over_low_temp")
			elif current_puzzle and current_puzzle.current_seq_index >= len(current_puzzle.sequence):
				renpy.jump("outcome_puzzle")


# --- Default Flags (Global cutscene flags removed) ---

# --- SCREENS ---
transform heart_shower(x_start, y_start, x_end, y_end, rotate, scale):
	pos (x_start, y_start)
	rotate rotate
	zoom scale
	alpha 1.0
	linear adjustable_config["heart_shower"]["duration"]:
		 pos (x_end, y_end)
		 alpha 0.0

screen FlashScreen():
	modal False
	zorder 5000
	timer adjustable_config["heart_shower"]["duration"] action Hide("FlashScreen")
	for data in heart_shower_anim:
		add data["heart_img"] at heart_shower(data["x_start"], data["y_start"], data["x_end"], data["y_end"], data["r_rotate"], data["r_scale"])

screen particles_screen():
	zorder 2000
	timer 0.1 action Function(cleanup_particles) repeat True
	for p in particles:
		$ age = time.time() - p['spawn_time']
		$ current_alpha = 1.0 if age < particle_config["fadeout_start"] else ((particle_config["lifetime"] - age) / max(0.001, (particle_config["lifetime"] - particle_config["fadeout_start"])))
		add p['heart'] at Transform(
			anchor=(0.5, 0.5),
			pos=(p['x'], p['y']),
			zoom=p['zoom'],
			rotate=p['rotate'],
			alpha=current_alpha
		)
	for p in excitement_particles:
		$ age = time.time() - p['spawn_time']
		$ current_alpha = 1.0 if age < particle_config_excitement["fadeout_start"] else ((particle_config_excitement["lifetime"] - age) / max(0.001, (particle_config_excitement["lifetime"] - particle_config_excitement["fadeout_start"])))
		add p['image'] at Transform(
			anchor=(0.5, 0.5),
			pos=(p['x'], p['y']),
			zoom=p['zoom'],
			rotate=p['rotate'],
			alpha=current_alpha
		)
	for p in trust_particles:
		$ age = time.time() - p['spawn_time']
		$ current_alpha = 1.0 if age < particle_config_trust["fadeout_start"] else ((particle_config_trust["lifetime"] - age) / max(0.001, (particle_config_trust["lifetime"] - particle_config_trust["fadeout_start"])))
		add p['image'] at Transform(
			anchor=(0.5, 0.5),
			pos=(p['x'], p['y']),
			zoom=p['zoom'],
			rotate=p['rotate'],
			alpha=current_alpha
		)

screen ParticleManagerScreen():
	zorder 1000
	timer adjustable_config["particle_update_interval"] action Function(update_particle_system) repeat True

screen puzzle_stats_update():
	timer 0.1 action Function(lambda: update_stats(is_interacting()) if not is_cutscene_active else None) repeat True

screen game_state_check():
	timer 0.1 action Function(puzzle_state_check) repeat True

screen Primary_stats():
	frame:
		xalign 0.0
		yalign 0.0
		padding (10, 10)
		background None
		style "empty"
		vbox:
			spacing 8
			text "Trust: [int(jaily.trust)]" size 18
			bar value jaily.trust range 100 xmaximum 150
			text "Excitement: [round(jaily.excitement)]" size 18
			bar value jaily.excitement range 100 xmaximum 150
			text "Temperature: [ '{:.2f}'.format(jaily.temperature) ]" size 18
			bar value jaily.temperature range 103.0 xmaximum 150
			text "Embarrassment: [int(jaily.embarrassment)]" size 18
			bar value jaily.embarrassment range 100 xmaximum 150

screen sequence_display():
	frame:
		xalign 0.5
		yalign 0.1
		background "#00000080"
		padding (10, 10)
		text "[', '.join(current_puzzle.sequence)]" size 24 color "#ffffff"

# --- REMOVED TouchScreen, TouchScreen2, TouchScreen3, TouchScreen4, TouchScreen5 ---

# --- NEW UNIFIED GameplayScreen ---
screen GameplayScreen():
	zorder 100
	modal True # Important to block interaction with underlying screens if any
	$ puzzle_id = current_puzzle.puzzle_type_id

	vbox:
		xalign 0.5
		yalign 0.5
		spacing 20
		button: # Cooldown button - common to all puzzles
			style "cyan_cooldown"
			action NullAction()
			hovered SetVariable("clicked_cooldown", True)
			unhovered SetVariable("clicked_cooldown", False)
			text "Cooldown" xalign 0.5 yalign 0.5

		if puzzle_id == 1:
			hbox:
				spacing 20
				button:
					style "red_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone1", True)
					unhovered SetVariable("clicked_zone1", False)
					text "Zone1" xalign 0.5 yalign 0.5
				button:
					style "green_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone2", True)
					unhovered SetVariable("clicked_zone2", False)
					text "Zone2" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked1", True)
					unhovered SetVariable("clicked_locked1", False)
					text "Locked1" xalign 0.5 yalign 0.5
		elif puzzle_id == 2:
			hbox:
				spacing 20
				button:
					style "red_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone1", True)
					unhovered SetVariable("clicked_zone1", False)
					text "Zone1" xalign 0.5 yalign 0.5
				button:
					style "green_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone2", True)
					unhovered SetVariable("clicked_zone2", False)
					text "Zone2" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked1", True)
					unhovered SetVariable("clicked_locked1", False)
					text "Locked1" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked2", True)
					unhovered SetVariable("clicked_locked2", False)
					text "Locked2" xalign 0.5 yalign 0.5
		elif puzzle_id == 3:
			hbox:
				spacing 20
				button:
					style "red_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone3", True)
					unhovered SetVariable("clicked_zone3", False)
					text "Zone3" xalign 0.5 yalign 0.5
				button:
					style "green_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone4", True)
					unhovered SetVariable("clicked_zone4", False)
					text "Zone4" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked3", True)
					unhovered SetVariable("clicked_locked3", False)
					text "Locked3" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked4", True)
					unhovered SetVariable("clicked_locked4", False)
					text "Locked4" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked5", True)
					unhovered SetVariable("clicked_locked5", False)
					text "Locked5" xalign 0.5 yalign 0.5
		elif puzzle_id == 4:
			hbox:
				spacing 20
				button:
					style "red_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone5", True)
					unhovered SetVariable("clicked_zone5", False)
					text "Zone5" xalign 0.5 yalign 0.5
				button:
					style "green_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone6", True)
					unhovered SetVariable("clicked_zone6", False)
					text "Zone6" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked6", True)
					unhovered SetVariable("clicked_locked6", False)
					text "Locked6" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked7", True)
					unhovered SetVariable("clicked_locked7", False)
					text "Locked7" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked8", True)
					unhovered SetVariable("clicked_locked8", False)
					text "Locked8" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked9", True)
					unhovered SetVariable("clicked_locked9", False)
					text "Locked9" xalign 0.5 yalign 0.5
		elif puzzle_id == 5:
			hbox:
				spacing 20
				button:
					style "red_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone7", True)
					unhovered SetVariable("clicked_zone7", False)
					text "Zone7" xalign 0.5 yalign 0.5
				button:
					style "green_hotzone"
					action NullAction()
					hovered SetVariable("clicked_zone8", True)
					unhovered SetVariable("clicked_zone8", False)
					text "Zone8" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked10", True)
					unhovered SetVariable("clicked_locked10", False)
					text "Locked10" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked11", True)
					unhovered SetVariable("clicked_locked11", False)
					text "Locked11" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked12", True)
					unhovered SetVariable("clicked_locked12", False)
					text "Locked12" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked13", True)
					unhovered SetVariable("clicked_locked13", False)
					text "Locked13" xalign 0.5 yalign 0.5
				button:
					style "blue_hotzone"
					action NullAction()
					hovered SetVariable("clicked_locked14", True)
					unhovered SetVariable("clicked_locked14", False)
					text "Locked14" xalign 0.5 yalign 0.5

# --- Overheat Overlay ---
screen overheat_overlay():
	zorder 4999
	timer 0.1 action NullAction() repeat True
	$ temp = jaily.temperature
	if temp <= 102.0:
		$ overlay_alpha = 0.0
	else:
		$ overlay_alpha = (min(temp, 103.0) - 102.0) * 0.25
	add Solid("#ff0000", xysize=(config.screen_width, config.screen_height)) alpha overlay_alpha

# --- STYLE DEFINITIONS ---
init python:
	style.red_hotzone = Style(style.button)
	style.red_hotzone.background = "#ffcccc"
	style.red_hotzone.hover_background = "#ffe6e6"
	style.red_hotzone.xysize = (150, 150)
	style.green_hotzone = Style(style.button)
	style.green_hotzone.background = "#ccffcc"
	style.green_hotzone.hover_background = "#e6ffe6"
	style.green_hotzone.xysize = (150, 150)
	style.blue_hotzone = Style(style.button)
	style.blue_hotzone.background = "#ccccff"
	style.blue_hotzone.hover_background = "#e6e6ff"
	style.blue_hotzone.xysize = (150, 150)
	style.cyan_cooldown = Style(style.button)
	style.cyan_cooldown.background = "#00ffff"
	style.cyan_cooldown.hover_background = "#e0ffff"
	style.cyan_cooldown.xysize = (150, 150)

# --- Consolidated hide for UI elements ---
label hide_all_ui:
	# $ _screens = ["TouchScreen", "TouchScreen2", "TouchScreen3", "TouchScreen4", "TouchScreen5", "ParticleManagerScreen"] # Old
	$ _screens = ["GameplayScreen", "ParticleManagerScreen"] # New
	python:
		for s in _screens:
			if renpy.has_screen(s): renpy.hide_screen(s)
	return

# --- LABELS (Game Flow) ---
label flash_screen:
	show screen FlashScreen
	pause adjustable_config["heart_shower"]["duration"]
	return

label game_over_max_temp:
	call hide_all_ui
	"Game Over: Temperature too high!"
	return

label game_over_embarrassment:
	call hide_all_ui
	"Game Over: Embarrassment reached 100!"
	return

label game_over_trust:
	call hide_all_ui
	"Game Over: Trust has dropped to 0!"
	return

label game_over_excitement:
	call hide_all_ui
	"Game Over: Excitement dropped to 0!"
	return

label game_over_low_temp:
	call hide_all_ui
	"Game Over: Temperature too low!"
	return

label outcome_puzzle:
	# $ screens_to_hide = ["TouchScreen", "TouchScreen2", "TouchScreen3", "TouchScreen4", "TouchScreen5", "ParticleManagerScreen", "particles_screen", "puzzle_stats_update", "Primary_stats", "game_state_check", "sequence_display", "overheat_overlay"] # Old
	$ screens_to_hide = ["GameplayScreen", "ParticleManagerScreen", "particles_screen", "puzzle_stats_update", "Primary_stats", "game_state_check", "sequence_display", "overheat_overlay"] # New
	python:
		for s_name in screens_to_hide:
			if renpy.has_screen(s_name): renpy.hide_screen(s_name)
	"Congratulations! Puzzle completed successfully!"
	$ next_story = "story{}".format(puzzle_stage + 1)
	jump expression next_story

label cut_scene1_label:
	# $ renpy.hide_screen("TouchScreen") # Old
	$ renpy.hide_screen("GameplayScreen") # New
	window show
	"Jaily says: \"sample scene\""
	menu:
		"Good":
			pass
		"Mid":
			pass
		"Bad":
			pass
		"Trust unlock":
			pass
	# $ renpy.show_screen("TouchScreen") # Old
	$ renpy.show_screen("GameplayScreen") # New
	return

label cut_scene2_label:
	# $ renpy.hide_screen("TouchScreen2") # Old
	$ renpy.hide_screen("GameplayScreen") # New
	window show
	"Jaily says: \"sample scene\""
	menu:
		"Good":
			pass
		"Mid":
			pass
		"Bad":
			pass
		"Trust unlock":
			pass
	# $ renpy.show_screen("TouchScreen2") # Old
	$ renpy.show_screen("GameplayScreen") # New
	return

# --- Start and Story Labels ---
label start:
	show screen Primary_stats
	"This is a story placeholder before the first puzzle."
	show screen overheat_overlay
	jump puzzle1_stage

label story2:
	window show
	show screen Primary_stats
	"This is a story placeholder before the second puzzle."
	jump puzzle2_stage

label story3:
	window show
	show screen Primary_stats
	"This is a story placeholder before the third puzzle."
	jump puzzle3_stage

label story4:
	window show
	show screen Primary_stats
	"This is a story placeholder before the fourth puzzle."
	jump puzzle4_stage

label story5:
	window show
	show screen Primary_stats
	"This is a story placeholder before the fifth puzzle."
	jump puzzle5_stage

label story6:
	window show
	show screen Primary_stats
	"This is a story placeholder for the final part of the game."

# --- Puzzle stage labels (Modified to use GameplayScreen) ---
label puzzle1_stage:
	$ puzzle_stage = 1
	$ current_puzzle = Puzzle()
	$ reset_game()
	window hide
	show screen sequence_display
	# show screen TouchScreen # Old
	show screen GameplayScreen # New
	show screen ParticleManagerScreen
	show screen particles_screen
	show screen puzzle_stats_update
	show screen Primary_stats
	show screen game_state_check
	show screen overheat_overlay
	pause

label puzzle2_stage:
	$ puzzle_stage = 2
	$ current_puzzle = Puzzle2()
	$ reset_game()
	window hide
	show screen sequence_display
	# show screen TouchScreen2 # Old
	show screen GameplayScreen # New
	show screen ParticleManagerScreen
	show screen particles_screen
	show screen puzzle_stats_update
	show screen Primary_stats
	show screen game_state_check
	show screen overheat_overlay
	pause

label puzzle3_stage:
	$ puzzle_stage = 3
	$ current_puzzle = Puzzle3()
	$ reset_game()
	window hide
	show screen sequence_display
	# show screen TouchScreen3 # Old
	show screen GameplayScreen # New
	show screen ParticleManagerScreen
	show screen particles_screen
	show screen puzzle_stats_update
	show screen Primary_stats
	show screen game_state_check
	show screen overheat_overlay
	pause

label puzzle4_stage:
	$ puzzle_stage = 4
	$ current_puzzle = Puzzle4()
	$ reset_game()
	window hide
	show screen sequence_display
	# show screen TouchScreen4 # Old
	show screen GameplayScreen # New
	show screen ParticleManagerScreen
	show screen particles_screen
	show screen puzzle_stats_update
	show screen Primary_stats
	show screen game_state_check
	show screen overheat_overlay
	pause

label puzzle5_stage:
	$ puzzle_stage = 5
	$ current_puzzle = Puzzle5()
	$ reset_game()
	window hide
	show screen sequence_display
	# show screen TouchScreen5 # Old
	show screen GameplayScreen # New
	show screen ParticleManagerScreen
	show screen particles_screen
	show screen puzzle_stats_update
	show screen Primary_stats
	show screen game_state_check
	show screen overheat_overlay
	pause

# --- End of Corrected Code Block ---
